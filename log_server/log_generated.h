// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LOG_LOG_H_
#define FLATBUFFERS_GENERATED_LOG_LOG_H_

#include "flatbuffers/flatbuffers.h"

namespace log {

struct Log;

struct LogConfig;

struct Buffer;

enum Msg {
  Msg_NONE = 0,
  Msg_Log = 1,
  Msg_LogConfig = 2,
  Msg_MIN = Msg_NONE,
  Msg_MAX = Msg_LogConfig
};

inline const Msg (&EnumValuesMsg())[3] {
  static const Msg values[] = {
    Msg_NONE,
    Msg_Log,
    Msg_LogConfig
  };
  return values;
}

inline const char * const *EnumNamesMsg() {
  static const char * const names[] = {
    "NONE",
    "Log",
    "LogConfig",
    nullptr
  };
  return names;
}

inline const char *EnumNameMsg(Msg e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesMsg()[index];
}

template<typename T> struct MsgTraits {
  static const Msg enum_value = Msg_NONE;
};

template<> struct MsgTraits<Log> {
  static const Msg enum_value = Msg_Log;
};

template<> struct MsgTraits<LogConfig> {
  static const Msg enum_value = Msg_LogConfig;
};

bool VerifyMsg(flatbuffers::Verifier &verifier, const void *obj, Msg type);
bool VerifyMsgVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct Log FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TIME = 4,
    VT_LEVEL = 6,
    VT_FILTER = 8,
    VT_OBJECT = 10,
    VT_FUNCTION = 12,
    VT_LINE = 14,
    VT_THREAD = 16,
    VT_MSG = 18
  };
  uint64_t time() const {
    return GetField<uint64_t>(VT_TIME, 0);
  }
  uint8_t level() const {
    return GetField<uint8_t>(VT_LEVEL, 0);
  }
  uint64_t filter() const {
    return GetField<uint64_t>(VT_FILTER, 0);
  }
  uint64_t object() const {
    return GetField<uint64_t>(VT_OBJECT, 0);
  }
  const flatbuffers::String *function() const {
    return GetPointer<const flatbuffers::String *>(VT_FUNCTION);
  }
  uint32_t line() const {
    return GetField<uint32_t>(VT_LINE, 0);
  }
  uint64_t thread() const {
    return GetField<uint64_t>(VT_THREAD, 0);
  }
  const flatbuffers::String *msg() const {
    return GetPointer<const flatbuffers::String *>(VT_MSG);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_TIME) &&
           VerifyField<uint8_t>(verifier, VT_LEVEL) &&
           VerifyField<uint64_t>(verifier, VT_FILTER) &&
           VerifyField<uint64_t>(verifier, VT_OBJECT) &&
           VerifyOffset(verifier, VT_FUNCTION) &&
           verifier.VerifyString(function()) &&
           VerifyField<uint32_t>(verifier, VT_LINE) &&
           VerifyField<uint64_t>(verifier, VT_THREAD) &&
           VerifyOffset(verifier, VT_MSG) &&
           verifier.VerifyString(msg()) &&
           verifier.EndTable();
  }
};

struct LogBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_time(uint64_t time) {
    fbb_.AddElement<uint64_t>(Log::VT_TIME, time, 0);
  }
  void add_level(uint8_t level) {
    fbb_.AddElement<uint8_t>(Log::VT_LEVEL, level, 0);
  }
  void add_filter(uint64_t filter) {
    fbb_.AddElement<uint64_t>(Log::VT_FILTER, filter, 0);
  }
  void add_object(uint64_t object) {
    fbb_.AddElement<uint64_t>(Log::VT_OBJECT, object, 0);
  }
  void add_function(flatbuffers::Offset<flatbuffers::String> function) {
    fbb_.AddOffset(Log::VT_FUNCTION, function);
  }
  void add_line(uint32_t line) {
    fbb_.AddElement<uint32_t>(Log::VT_LINE, line, 0);
  }
  void add_thread(uint64_t thread) {
    fbb_.AddElement<uint64_t>(Log::VT_THREAD, thread, 0);
  }
  void add_msg(flatbuffers::Offset<flatbuffers::String> msg) {
    fbb_.AddOffset(Log::VT_MSG, msg);
  }
  explicit LogBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LogBuilder &operator=(const LogBuilder &);
  flatbuffers::Offset<Log> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Log>(end);
    return o;
  }
};

inline flatbuffers::Offset<Log> CreateLog(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t time = 0,
    uint8_t level = 0,
    uint64_t filter = 0,
    uint64_t object = 0,
    flatbuffers::Offset<flatbuffers::String> function = 0,
    uint32_t line = 0,
    uint64_t thread = 0,
    flatbuffers::Offset<flatbuffers::String> msg = 0) {
  LogBuilder builder_(_fbb);
  builder_.add_thread(thread);
  builder_.add_object(object);
  builder_.add_filter(filter);
  builder_.add_time(time);
  builder_.add_msg(msg);
  builder_.add_line(line);
  builder_.add_function(function);
  builder_.add_level(level);
  return builder_.Finish();
}

inline flatbuffers::Offset<Log> CreateLogDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t time = 0,
    uint8_t level = 0,
    uint64_t filter = 0,
    uint64_t object = 0,
    const char *function = nullptr,
    uint32_t line = 0,
    uint64_t thread = 0,
    const char *msg = nullptr) {
  return log::CreateLog(
      _fbb,
      time,
      level,
      filter,
      object,
      function ? _fbb.CreateString(function) : 0,
      line,
      thread,
      msg ? _fbb.CreateString(msg) : 0);
}

struct LogConfig FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_LEVEL = 4,
    VT_FILTER = 6,
    VT_OBJECT = 8,
    VT_FUNCTION = 10,
    VT_LINE = 12,
    VT_THREAD = 14,
    VT_REGEXP = 16
  };
  uint8_t level() const {
    return GetField<uint8_t>(VT_LEVEL, 0);
  }
  uint64_t filter() const {
    return GetField<uint64_t>(VT_FILTER, 0);
  }
  uint64_t object() const {
    return GetField<uint64_t>(VT_OBJECT, 0);
  }
  const flatbuffers::String *function() const {
    return GetPointer<const flatbuffers::String *>(VT_FUNCTION);
  }
  uint32_t line() const {
    return GetField<uint32_t>(VT_LINE, 0);
  }
  uint64_t thread() const {
    return GetField<uint64_t>(VT_THREAD, 0);
  }
  const flatbuffers::String *regexp() const {
    return GetPointer<const flatbuffers::String *>(VT_REGEXP);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_LEVEL) &&
           VerifyField<uint64_t>(verifier, VT_FILTER) &&
           VerifyField<uint64_t>(verifier, VT_OBJECT) &&
           VerifyOffset(verifier, VT_FUNCTION) &&
           verifier.VerifyString(function()) &&
           VerifyField<uint32_t>(verifier, VT_LINE) &&
           VerifyField<uint64_t>(verifier, VT_THREAD) &&
           VerifyOffset(verifier, VT_REGEXP) &&
           verifier.VerifyString(regexp()) &&
           verifier.EndTable();
  }
};

struct LogConfigBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_level(uint8_t level) {
    fbb_.AddElement<uint8_t>(LogConfig::VT_LEVEL, level, 0);
  }
  void add_filter(uint64_t filter) {
    fbb_.AddElement<uint64_t>(LogConfig::VT_FILTER, filter, 0);
  }
  void add_object(uint64_t object) {
    fbb_.AddElement<uint64_t>(LogConfig::VT_OBJECT, object, 0);
  }
  void add_function(flatbuffers::Offset<flatbuffers::String> function) {
    fbb_.AddOffset(LogConfig::VT_FUNCTION, function);
  }
  void add_line(uint32_t line) {
    fbb_.AddElement<uint32_t>(LogConfig::VT_LINE, line, 0);
  }
  void add_thread(uint64_t thread) {
    fbb_.AddElement<uint64_t>(LogConfig::VT_THREAD, thread, 0);
  }
  void add_regexp(flatbuffers::Offset<flatbuffers::String> regexp) {
    fbb_.AddOffset(LogConfig::VT_REGEXP, regexp);
  }
  explicit LogConfigBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LogConfigBuilder &operator=(const LogConfigBuilder &);
  flatbuffers::Offset<LogConfig> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LogConfig>(end);
    return o;
  }
};

inline flatbuffers::Offset<LogConfig> CreateLogConfig(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t level = 0,
    uint64_t filter = 0,
    uint64_t object = 0,
    flatbuffers::Offset<flatbuffers::String> function = 0,
    uint32_t line = 0,
    uint64_t thread = 0,
    flatbuffers::Offset<flatbuffers::String> regexp = 0) {
  LogConfigBuilder builder_(_fbb);
  builder_.add_thread(thread);
  builder_.add_object(object);
  builder_.add_filter(filter);
  builder_.add_regexp(regexp);
  builder_.add_line(line);
  builder_.add_function(function);
  builder_.add_level(level);
  return builder_.Finish();
}

inline flatbuffers::Offset<LogConfig> CreateLogConfigDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t level = 0,
    uint64_t filter = 0,
    uint64_t object = 0,
    const char *function = nullptr,
    uint32_t line = 0,
    uint64_t thread = 0,
    const char *regexp = nullptr) {
  return log::CreateLogConfig(
      _fbb,
      level,
      filter,
      object,
      function ? _fbb.CreateString(function) : 0,
      line,
      thread,
      regexp ? _fbb.CreateString(regexp) : 0);
}

struct Buffer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_MSG_TYPE = 4,
    VT_MSG = 6
  };
  Msg msg_type() const {
    return static_cast<Msg>(GetField<uint8_t>(VT_MSG_TYPE, 0));
  }
  const void *msg() const {
    return GetPointer<const void *>(VT_MSG);
  }
  template<typename T> const T *msg_as() const;
  const Log *msg_as_Log() const {
    return msg_type() == Msg_Log ? static_cast<const Log *>(msg()) : nullptr;
  }
  const LogConfig *msg_as_LogConfig() const {
    return msg_type() == Msg_LogConfig ? static_cast<const LogConfig *>(msg()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_MSG_TYPE) &&
           VerifyOffset(verifier, VT_MSG) &&
           VerifyMsg(verifier, msg(), msg_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Log *Buffer::msg_as<Log>() const {
  return msg_as_Log();
}

template<> inline const LogConfig *Buffer::msg_as<LogConfig>() const {
  return msg_as_LogConfig();
}

struct BufferBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_msg_type(Msg msg_type) {
    fbb_.AddElement<uint8_t>(Buffer::VT_MSG_TYPE, static_cast<uint8_t>(msg_type), 0);
  }
  void add_msg(flatbuffers::Offset<void> msg) {
    fbb_.AddOffset(Buffer::VT_MSG, msg);
  }
  explicit BufferBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BufferBuilder &operator=(const BufferBuilder &);
  flatbuffers::Offset<Buffer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Buffer>(end);
    return o;
  }
};

inline flatbuffers::Offset<Buffer> CreateBuffer(
    flatbuffers::FlatBufferBuilder &_fbb,
    Msg msg_type = Msg_NONE,
    flatbuffers::Offset<void> msg = 0) {
  BufferBuilder builder_(_fbb);
  builder_.add_msg(msg);
  builder_.add_msg_type(msg_type);
  return builder_.Finish();
}

inline bool VerifyMsg(flatbuffers::Verifier &verifier, const void *obj, Msg type) {
  switch (type) {
    case Msg_NONE: {
      return true;
    }
    case Msg_Log: {
      auto ptr = reinterpret_cast<const Log *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Msg_LogConfig: {
      auto ptr = reinterpret_cast<const LogConfig *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyMsgVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyMsg(
        verifier,  values->Get(i), types->GetEnum<Msg>(i))) {
      return false;
    }
  }
  return true;
}

inline const log::Buffer *GetBuffer(const void *buf) {
  return flatbuffers::GetRoot<log::Buffer>(buf);
}

inline const log::Buffer *GetSizePrefixedBuffer(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<log::Buffer>(buf);
}

inline bool VerifyBufferBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<log::Buffer>(nullptr);
}

inline bool VerifySizePrefixedBufferBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<log::Buffer>(nullptr);
}

inline void FinishBufferBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<log::Buffer> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedBufferBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<log::Buffer> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace log

#endif  // FLATBUFFERS_GENERATED_LOG_LOG_H_
